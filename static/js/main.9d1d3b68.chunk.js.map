{"version":3,"sources":["logic/board.js","context/BoardContext.js","constants/settings.js","components/SettingsModal/settingModalStyles.js","components/SettingsModal/SettingsModal.js","components/ButtonsGroup.js","components/Cell.js","components/Board.js","App.js","index.js"],"names":["createBoard","rows","columns","paramBoard","board","y","x","length","countNeighbors","xNeighbors","sum","i","j","getNextLife","life","nextLife","BoardContext","createContext","BoardProvider","props","useState","isRunning","setIsRunning","setColumns","setRows","time","setTime","setBoard","count","setCount","nextGeneration","newBoard","neighbors","createNextBoard","useEffect","timer","setTimeout","clearTimeout","Provider","value","children","GENERATION_NAME_LOCALSTORAGE","RedButton","withStyles","root","color","backgroundColor","red","Button","GreenButton","green","SettingsModal","useContext","enqueueSnackbar","useSnackbar","open","setOpen","handleClose","validationSchema","yup","localTime","positive","moreThan","MIN_TIME","required","localRows","max","localColumns","formik","useFormik","initialValues","onSubmit","values","variant","className","Tooltip","title","IconButton","onClick","Modal","onClose","handleSubmit","TextField","fullWidth","id","name","label","type","onChange","handleChange","error","touched","Boolean","errors","helperText","ButtonsGroup","handleStart","actionButton","saveGeneration","force","localStorage","getItem","setItem","JSON","stringify","action","ButtonGroup","size","disabled","generation","parse","Cell","posY","posX","top","left","Board","refBoard","createRef","current","style","ref","map","row","App","maxSnack","AppBar","position","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d1d3b68.chunk.js","sourcesContent":["// create empty board (all cell dead).\r\nexport const createBoard = (rows, columns, paramBoard) => {\r\n  let board = [];\r\n  \r\n  for (let y=0; y<rows; y++) {\r\n    board[y] = [];\r\n      \r\n    for (let x=0; x<columns; x++) {\r\n      // set the life value with the value of paramBoard. \r\n      // this is used when the saved game loads or change the board dimensions.\r\n      // the dimensions are verified for the cases that the board is enlarged.\r\n      if (paramBoard && x < paramBoard[0].length && y < paramBoard.length)\r\n        board[y][x] = paramBoard[y][x];\r\n      else\r\n        // life set 0 (dead) if no received parameter.\r\n        board[y][x] = 0;\r\n    }\r\n  }\r\n  return board;\r\n}\r\n\r\n// return the sum of the neighbors.\r\nconst countNeighbors = (x, y, board, rows, columns) => {\r\n  let xNeighbors, yNeighbors, sum = 0;\r\n\r\n  for(let i=-1; i<2; i++) {\r\n    for(let j=-1; j<2; j++) {\r\n      // calculate coordinates of the neighbors.\r\n      xNeighbors = (x + j + columns) % columns;\r\n      yNeighbors = (y + i + rows) % rows;\r\n      \r\n      // the central cell is not a neighbor.\r\n      if(i !== 0 || j !== 0)\r\n        sum += board[yNeighbors][xNeighbors];\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\n// checking conway's laws.\r\nexport const getNextLife = (sum, life) => {\r\n  let nextLife = life;\r\n  \r\n  // DEAD \r\n  // Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n  // Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n  if (sum<2 || sum>3)\r\n    nextLife = 0;\r\n\r\n  // LIFE\r\n  // Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n  if (sum === 3)\r\n    nextLife = 1;\r\n\r\n  return nextLife;\r\n}\r\n\r\nexport const createNextBoard = (board, rows, columns) => {\r\n  let life, neighbors, newBoard = [];\r\n\r\n  for (let y=0; y<rows; y++) {\r\n    newBoard[y] = [];\r\n\r\n    for (let x=0; x<columns; x++) {\r\n      // count live neighbors.\r\n      neighbors = countNeighbors(x, y, board, rows, columns);   \r\n      // get the new alive status of the cell.\r\n      life = getNextLife(neighbors, board[y][x]);\r\n      // create new board.\r\n      newBoard[y][x] = life; \r\n    }\r\n  }\r\n  return newBoard;\r\n} ","import React, { createContext, useEffect, useState } from 'react';\r\n\r\nimport { createBoard, createNextBoard } from '../logic/board';\r\n\r\nexport const BoardContext = createContext();\r\n\r\nexport function BoardProvider(props) {\r\n  // settigns variables.\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [columns, setColumns ] = useState(50);\r\n  const [rows, setRows] = useState(30);\r\n  const [time, setTime] = useState(300);\r\n\r\n  // game variables.\r\n  const [board, setBoard] = useState(createBoard(rows, columns)); \r\n  const [count, setCount] = useState(0);\r\n  \r\n  const nextGeneration = () => {\r\n    const newBoard = createNextBoard(board, rows, columns);\r\n    setCount(count+1);\r\n    setBoard(newBoard); \r\n  }\r\n \r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const timer= setTimeout (() => {\r\n        nextGeneration();\r\n      }, time);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    setBoard(board => createBoard(rows, columns, board));\r\n  },[rows, columns]);\r\n\r\n  return (\r\n    <BoardContext.Provider value={{  isRunning,  setIsRunning,\r\n                                     count, setCount,\r\n                                     board, setBoard,\r\n                                     columns, setColumns,\r\n                                     rows, setRows,\r\n                                     time, setTime,\r\n                                     nextGeneration,\r\n                                  }}>\r\n      {props.children}      \r\n    </BoardContext.Provider>\r\n  );\r\n}","export const GENERATION_NAME_LOCALSTORAGE = \"game-of-life\";\r\n\r\nexport const INCREMENT_MOVE_BOARD = 2; // value in percentage.\r\n\r\nexport const MAX_COLUMNS = 100;\r\nexport const MAX_ROWS = 100;\r\nexport const MIN_TIME = 99;","import { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { red, green } from '@material-ui/core/colors';\r\n\r\nexport const RedButton = withStyles(() => ({\r\n    root: {\r\n      color: \"#fafafa\",\r\n      backgroundColor: red[600],\r\n      '&:hover': {\r\n        backgroundColor: red[700],\r\n      },\r\n    },\r\n}))(Button);\r\n\r\nexport const GreenButton = withStyles(() => ({\r\n    root: {\r\n      color: \"#fafafa\",\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n}))(Button);","import React, { useContext, useState } from 'react';\r\n\r\n// import from external libraries.\r\nimport { IconButton, Modal, TextField, Tooltip } from '@material-ui/core';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\n// import from local files.\r\nimport { MIN_TIME, MAX_ROWS, MAX_COLUMNS } from '../../constants/settings';\r\nimport { RedButton, GreenButton } from './settingModalStyles';\r\nimport { BoardContext } from '../../context/BoardContext';\r\n\r\nfunction SettingsModal() {\r\n  const { time, rows, columns, setColumns, setRows, setTime} = useContext(BoardContext);\r\n  \r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const handleClose = () => setOpen(false);\r\n  const handleOpen = () => setOpen(true);\r\n  \r\n  // form validation with yup library.\r\n  const validationSchema = yup.object({\r\n    localTime: yup\r\n      .number()\r\n      .positive('El número debe ser positivo')\r\n      .moreThan(MIN_TIME, `El intervalo mínimo es de ${MIN_TIME+1}ms`)\r\n      .required('Intervalo de tiempo requerido'),\r\n    localRows: yup\r\n      .number()\r\n      .positive('El número debe ser positivo')\r\n      .max(MAX_ROWS, `No se puede superar las ${MAX_ROWS} filas`)\r\n      .required('Cantidad de filas requerido'),\r\n    localColumns: yup\r\n      .number()\r\n      .positive('El número debe ser positivo')\r\n      .max(MAX_COLUMNS, `No se puede superar las ${MAX_COLUMNS} columnas`)\r\n      .required('Cantidad de columnas requerido'),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      localTime: time,\r\n      localRows: rows,\r\n      localColumns: columns\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      // set values.\r\n      setColumns(values.localColumns);\r\n      setRows(values.localRows);\r\n      setTime(values.localTime);\r\n      //close modal.\r\n      handleClose();\r\n      // show success message.\r\n      enqueueSnackbar(\"Configuraciones Modificadas con éxito.\", { variant: 'success' });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"text-end\">\r\n        <Tooltip title=\"Configuraciones\">\r\n          <IconButton color=\"inherit\" onClick={handleOpen}>\r\n            <SettingsIcon/>\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n\r\n      <Modal open={open} onClose={handleClose}>\r\n        <div className=\"box-modal\">\r\n          <h2 className=\"modal-title\">Configuraciones</h2>\r\n\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <div className=\"my-2\">\r\n              <TextField\r\n                fullWidth\r\n                id=\"localTime\"\r\n                name=\"localTime\"\r\n                label=\"Intervalo de tiempo\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={formik.values.localTime}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.localTime && Boolean(formik.errors.localTime)}\r\n                helperText={formik.touched.localTime && formik.errors.localTime}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"my-2\">\r\n              <TextField\r\n                fullWidth\r\n                id=\"localColumns\"\r\n                name=\"localColumns\"\r\n                label=\"Columnas\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={formik.values.localColumns}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.localColumns && Boolean(formik.errors.localColumns)}\r\n                helperText={formik.touched.localColumns && formik.errors.localColumns}\r\n              />\r\n            </div>\r\n            \r\n            <div className=\"my-2\">\r\n              <TextField\r\n                fullWidth\r\n                id=\"localRows\"\r\n                name=\"localRows\"\r\n                label=\"Filas\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={formik.values.localRows}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.localRows && Boolean(formik.errors.localRows)}\r\n                helperText={formik.touched.localRows && formik.errors.localRows}\r\n              />\r\n            </div>\r\n                  \r\n            <div className=\"modal-box-buttons\">\r\n              <RedButton variant=\"contained\"onClick={handleClose}>Cancelar</RedButton> \r\n              <GreenButton variant=\"contained\" type=\"submit\">Aceptar</GreenButton>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingsModal;","import React, { useContext } from 'react';\r\n\r\nimport { useSnackbar } from 'notistack';\r\n\r\n// import from material-ui.\r\nimport { Button, ButtonGroup, Tooltip } from '@material-ui/core';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\n// import from local files.\r\nimport { BoardContext } from '../context/BoardContext';\r\nimport { createBoard } from '../logic/board';\r\n\r\n// import constants.\r\nimport { GENERATION_NAME_LOCALSTORAGE } from '../constants/settings';\r\n\r\nfunction ButtonsGroup() {\r\n  const { board, columns, isRunning, nextGeneration, rows, setBoard, setCount, setColumns, setIsRunning, setRows } = useContext(BoardContext);\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const handleStart = () => setIsRunning(!isRunning);\r\n\r\n  const handleRestart = () => {\r\n    setBoard(createBoard(rows, columns));\r\n    setCount(0);\r\n  }\r\n\r\n\r\n  // save generation functions.\r\n  const actionButton = () => (\r\n    <>\r\n      <Button onClick={() => { saveGeneration(true) }}>\r\n        Reemplazar\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  const saveGeneration = (force) => {\r\n    const generation = localStorage.getItem(GENERATION_NAME_LOCALSTORAGE);\r\n\r\n    // check if exist a generation saved.\r\n    // force is used to replace the saved generation.\r\n    if (!generation || force) {\r\n      // board is transformed into a string to be stored in the localstorage\r\n      localStorage.setItem(GENERATION_NAME_LOCALSTORAGE, JSON.stringify(board));\r\n      // show success message.\r\n      enqueueSnackbar(\"Generación guardada con éxito.\", { variant: 'success' });\r\n    } else {\r\n      // show error message.\r\n      enqueueSnackbar(\"Ya existe un juego guardado.\", { variant: 'error', action: actionButton });\r\n    }\r\n  }\r\n\r\n  // load generation functions.\r\n  const getSavedGeneration = () => {\r\n    let generation = localStorage.getItem(GENERATION_NAME_LOCALSTORAGE);\r\n\r\n    // check if exist a generation saved.\r\n    if (generation) {\r\n      // transform the saved generation in a matrix board.\r\n      generation = JSON.parse(generation);\r\n      // set life values and dimentions board. reset count.\r\n      setColumns(generation[0].length);\r\n      setRows(generation.length);\r\n      setBoard(generation);\r\n      setCount(0);\r\n      // show success message.\r\n      enqueueSnackbar(\"Generación cargada con éxito.\", { variant: 'success' });\r\n    } else {\r\n      // show error message.\r\n      enqueueSnackbar(\"No hay ninguna generación guardada.\", { variant: 'error'});\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ButtonGroup variant=\"contained\" color=\"primary\" size=\"large\">\r\n        {isRunning ? (\r\n          <Tooltip title=\"Pausar\">\r\n            <Button onClick={handleStart}>\r\n              <PauseIcon/>\r\n            </Button>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title=\"Iniciar\">\r\n            <Button onClick={handleStart}>\r\n              <PlayArrowIcon/>\r\n            </Button>\r\n          </Tooltip>\r\n        )}\r\n\r\n        <Button onClick={handleRestart} disabled={isRunning}>\r\n          <Tooltip title=\"Reiniciar\">\r\n            <StopIcon/>\r\n          </Tooltip>\r\n        </Button>\r\n        \r\n        <Button onClick={nextGeneration} disabled={isRunning}>\r\n          <Tooltip title=\"Próxima generación\">\r\n            <SkipNextIcon/>\r\n          </Tooltip>\r\n        </Button>\r\n        \r\n        <Button onClick={()=>saveGeneration(false)} disabled={isRunning}>\r\n          <Tooltip title=\"Guardar Generación\">\r\n            <SaveIcon/>\r\n          </Tooltip>\r\n        </Button>\r\n        \r\n        <Button onClick={getSavedGeneration} disabled={isRunning}>\r\n          <Tooltip title=\"Cargar Generación\">\r\n            <GetAppIcon/>\r\n          </Tooltip>\r\n        </Button>\r\n      </ButtonGroup>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ButtonsGroup;","import React, {useContext} from 'react';\r\n\r\nimport { BoardContext } from '../context/BoardContext';\r\n\r\nfunction Cell({ life, posY, posX }) {\r\n  const { board, isRunning, setBoard } = useContext(BoardContext);\r\n\r\n  // click cell.\r\n  const handleClick = () => {\r\n    if (!isRunning) {\r\n      const newBoard = [...board];\r\n\r\n      // change life value.\r\n      if (newBoard[posY][posX] === 0)\r\n        newBoard[posY][posX] = 1;\r\n      else\r\n        newBoard[posY][posX] = 0;\r\n      \r\n      // save new board status.\r\n      setBoard(newBoard);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div onClick={handleClick}>\r\n      { // set background color according to life value. \r\n        life === 1 ? (\r\n          <div className=\"cell bgColor\"/>\r\n        ) : (\r\n          <div className=\"cell\"/>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default  Cell;","import React, { createRef, useContext } from 'react';\r\n\r\n// imports from material ui.\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\r\nimport { IconButton, Tooltip } from '@material-ui/core';\r\n\r\n// import from local files.\r\nimport { INCREMENT_MOVE_BOARD } from '../constants/settings';\r\nimport { BoardContext } from '../context/BoardContext';\r\nimport Cell from './Cell';\r\n\r\n// init in the center board.\r\nlet top=50, left=50;\r\n\r\nfunction Board() {\r\n  const { board } = useContext(BoardContext);\r\n  const refBoard = createRef();\r\n  \r\n  const centerBoard = () => {\r\n    top=50;\r\n    left=50;\r\n    refBoard.current.style.top = `${top}%`;\r\n    refBoard.current.style.left = `${left}%`;\r\n  }\r\n\r\n  const moveUp = () => {\r\n    top -= INCREMENT_MOVE_BOARD;\r\n    refBoard.current.style.top = `${top}%`;\r\n  }\r\n  \r\n  const moveDown = () => {\r\n    top += INCREMENT_MOVE_BOARD;\r\n    refBoard.current.style.top = `${top}%`;\r\n  }\r\n  \r\n  const moveLeft = () => {\r\n    left -= INCREMENT_MOVE_BOARD;\r\n    refBoard.current.style.left = `${left}%`;\r\n  }\r\n\r\n  const moveRight = () => {\r\n    left += INCREMENT_MOVE_BOARD;\r\n    refBoard.current.style.left = `${left}%`;\r\n  } \r\n\r\n  return (\r\n    <div className=\"box-game\">\r\n      <div className=\"btn-center\">\r\n        <Tooltip title=\"Centrar tablero\">\r\n          <IconButton color=\"inherit\" onClick={centerBoard}>\r\n            <AspectRatioIcon/>\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n\r\n      <IconButton color=\"inherit\" onClick={moveUp}>\r\n        <KeyboardArrowUpIcon/>\r\n      </IconButton>\r\n      \r\n      <div className=\"box-board-flex\">\r\n        <IconButton color=\"inherit\" onClick={moveLeft}>\r\n          <KeyboardArrowLeftIcon/>\r\n        </IconButton>\r\n        \r\n        <div className=\"container-box-board\">\r\n          <div ref={refBoard} className=\"box-board\">\r\n            {\r\n              board.map((row, y) => {\r\n                return (\r\n                  <div key={y} className=\"flex\">\r\n                    {\r\n                      row.map((life, x) => {\r\n                        return <Cell key={x} life={life} posY={y} posX={x} />\r\n                      })\r\n                    }\r\n                  </div>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n        \r\n        <IconButton color=\"inherit\" onClick={moveRight}>\r\n          <KeyboardArrowRightIcon/>\r\n        </IconButton>\r\n      </div>\r\n      \r\n      <IconButton color=\"inherit\" onClick={moveDown}>\r\n        <KeyboardArrowDownIcon/>\r\n      </IconButton>   \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board;","import { useContext } from 'react';\n\nimport { SnackbarProvider } from 'notistack';\nimport { AppBar } from '@material-ui/core';\n\nimport SettingsModal from './components/SettingsModal/SettingsModal';\nimport { BoardContext } from './context/BoardContext';\nimport ButtonsGroup from './components/ButtonsGroup'; \nimport Board from './components/Board';\n\nfunction App() {\n  const { count } = useContext(BoardContext);\n  \n  return (\n    <SnackbarProvider maxSnack={3}>  \n      <AppBar position=\"static\">\n        <SettingsModal/>\n      </AppBar>\n\n      <p className=\"text-generation\">Generación # {count}</p>\n\n      <Board/>\n\n      <div className=\"box-buttons-bar\">\n        <ButtonsGroup/>\n      </div>\n    </SnackbarProvider>   \n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { BoardProvider } from './context/BoardContext';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BoardProvider>\n      <App />\n    </BoardProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}